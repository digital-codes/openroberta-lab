include: "classpath:/common.methods.yml"

## FunctionNames

OMNIDRIVESPEED:
  PYTHON: |
    def _setSpeedOmnidrive(x, y, z):
        global _speed
        _speed[0] = (1 / 100 * x) * _maxSpeed
        _speed[1] = (1 / 100 * y) * _maxSpeed
        _speed[2] = 1 / 100 * z * _maxSpeed

POSTVEL:
  PYTHON: |
    def _postVel():
        OMNIDRIVE_URL = "http://" + ROBOTINOIP + "/data/omnidrive"
        r = requests.post(url = OMNIDRIVE_URL, params = PARAMS, json = _speed )
        if r.status_code != requests.codes.ok:
            raise RuntimeError("Error: post to %s with params %s failed", OMNIDRIVE_URL, PARAMS)

GETDISTANCE:
  PYTHON: |
    def _getDistance(port):
        DISTANCES_URL = "http://" + ROBOTINOIP + "/data/distancesensorarray"
        r = requests.get(url = DISTANCES_URL, params = PARAMS)
        if r.status_code == requests.codes.ok:
            data = r.json()
            return data[port-1] * 100
        else:
            raise RuntimeError("Error: get from %s with params %s failed", DISTANCES_URL, PARAMS)

ISBUMPED:
  PYTHON: |
    def _isBumped():
        BUMPER_URL = "http://" + ROBOTINOIP + "/data/bumper"
        r = requests.get(url = BUMPER_URL, params = PARAMS)
        if r.status_code == requests.codes.ok:
            data = r.json()
            return data["value"]
        else:
            raise RuntimeError("Error: get from %s with params %s failed", BUMPER_URL, PARAMS)

SETDIGITALPIN:
  PYTHON: |
    def _setDigitalPin(pos, value):
        _digitalPinValues[pos-1] = int(value)
        DIGITALPIN_URL = "http://" + ROBOTINOIP + "/data/digitaloutputstatus"
            r = requests.post(url = DIGITALPIN_URL, params = PARAMS, json = _digitalPinValues )
            if r.status_code != requests.codes.ok:
                #print("Error: post to %s with params %s failed", OMNIDRIVE_URL, PARAMS)

GETDIGITALPIN:
  PYTHON: |
    def _getDigitalPin(pos):
        DIGITALPIN_URL = "http://" + ROBOTINOIP + "/data/digitalinputarray"
        r = requests.get(url = DIGITALPIN_URL, params = PARAMS)
        if r.status_code == requests.codes.ok:
            data = r.json()
            return data[pos-1]
        else:
            raise RuntimeError("Error: get from %s with params %s failed", DISTANCES_URL, PARAMS)

GETANALOGPIN:
  PYTHON: |
    def _getAnalogPin(pos):
        ANALOGPIN_URL = "http://" + ROBOTINOIP + "/data/analoginputarray"
        r = requests.get(url = ANALOGPIN_URL, params = PARAMS)
        if r.status_code == requests.codes.ok:
            data = r.json()
            return data[pos-1]
        else:
            raise RuntimeError("Error: get from %s with params %s failed", DISTANCES_URL, PARAMS)

GETODOMETRY:
  PYTHON: |
    def _getOdometry(val):
        ODOMETRY_URL = "http://" + ROBOTINOIP + "/data/odometry"
        r = requests.get(url = ODOMETRY_URL, params = PARAMS)
        if r.status_code == requests.codes.ok:
            data = r.json()
            #data: [x,y,rot,vx,vy,omega,seq]
            if val == 'x':
                return data[0]
            elif val == 'y':
                return data[1]
            elif val == 'rot':
                return data[2]:
            else:
                return data
        else:
            raise RuntimeError("Error: get from %s with params %s failed", DISTANCES_URL, PARAMS)
